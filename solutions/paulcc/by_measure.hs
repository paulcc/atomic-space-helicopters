import Debug.Trace
import Data.List as L
import Data.Map as M

start  = (0,0)
target = (length (head problem) - 1, length problem - 1)

coords = [ (x,y) 
         | (y,row) <- zip [0..] problem
         , (x,c)   <- zip [0..] row 
         , c /= " "
         ]

problem = eg1

-- Just "DDRRDRRDRRRRRRDRDDDDDRDDRRDRRRRDDDDDDDRDDRDRRRRDX"
eg1 = [[" "," ","#"," ","#"," ","#"," ","#"," "," "," "," "," "," ","#"," ","#"," "," "," "," "," ","#"," "],
       [" "," "," ","#"," "," "," "," "," "," "," ","#","#"," ","#"," ","#"," ","#"," "," "," "," "," ","#"],
       [" "," "," "," "," "," "," "," "," "," ","#"," "," ","#"," "," "," ","#"," "," "," ","#","#","#"," "],
       [" ","#"," "," "," "," ","#"," "," "," "," "," ","#","#","#"," "," "," "," "," "," "," "," "," ","#"],
       [" "," "," ","#"," "," "," "," "," "," "," ","#","#"," "," "," ","#"," "," "," ","#"," ","#"," "," "],
       ["#"," "," "," "," "," ","#"," ","#","#"," "," ","#"," "," ","#"," "," "," "," "," ","#"," "," "," "],
       ["#"," ","#"," "," "," "," "," ","#"," ","#"," "," "," "," ","#"," "," ","#"," "," "," "," "," "," "],
       ["#"," ","#"," ","#","#","#"," "," "," ","#"," "," ","#","#"," "," "," "," ","#"," ","#"," "," "," "],
       [" "," ","#"," "," "," "," "," "," ","#"," "," ","#"," "," "," "," "," "," "," ","#"," "," "," "," "],
       [" "," ","#"," "," ","#"," ","#","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," "," ","#"," "],
       [" ","#"," "," "," "," "," ","#","#"," "," "," "," ","#","#","#","#"," ","#"," "," ","#"," "," ","#"],
       [" "," "," "," "," "," "," ","#"," "," "," ","#"," "," "," ","#","#","#"," "," "," ","#"," "," "," "],
       ["#"," "," "," "," ","#"," ","#","#"," "," "," "," "," "," ","#"," "," "," "," ","#"," "," "," ","#"],
       ["#","#"," ","#","#","#","#"," "," "," "," "," "," ","#"," "," "," "," "," "," "," "," ","#","#"," "],
       [" "," "," "," "," "," ","#","#"," "," "," "," "," ","#"," "," "," ","#"," "," "," "," "," "," ","#"],
       [" ","#"," "," "," "," ","#"," ","#"," ","#"," ","#"," ","#","#"," ","#"," "," "," "," "," "," ","#"],
       [" "," "," ","#"," ","#","#"," "," "," ","#"," "," ","#","#"," "," ","#"," "," "," ","#"," ","#"," "],
       [" ","#"," ","#"," "," "," "," "," ","#"," "," ","#"," ","#","#","#","#"," "," "," ","#"," "," ","#"],
       ["#"," "," "," "," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," "," "," "," "," "," ","#"],
       [" ","#"," ","#"," ","#"," ","#","#","#"," "," "," ","#"," "," "," ","#"," "," "," ","#"," ","#"," "],
       [" "," "," "," ","#"," "," "," "," "," ","#"," ","#"," "," ","#"," "," "," "," ","#"," "," "," "," "],
       [" "," "," ","#"," "," ","#"," "," "," "," "," ","#","#"," "," "," "," ","#"," "," "," "," "," "," "],
       ["#"," "," "," "," "," "," "," ","#"," "," "," ","#"," "," "," "," "," "," "," "," "," "," ","#","#"],
       [" ","#"," "," ","#"," "," ","#","#","#"," "," ","#"," ","#","#"," ","#"," ","#"," "," "," "," "," "],
       [" "," "," "," "," "," "," "," ","#"," "," "," ","#"," "," "," ","#","#"," "," "," ","#"," ","#"," "]]

-- original is unsolvable
eg2 = 
  [[" "," ","#"," ","#"," "," "," "," ","#"," "," "," ","#"," "," "," ","#"," "," "," "," "," "," "," "],
   [" "," "," ","#"," "," ","#"," ","#"," "," "," "," "," "," ","#"," "," "," "," "," "," ","#"," ","#"],
   [" "," "," ","#","#"," ","#","#"," "," "," "," "," ","#"," "," "," "," "," ","#"," "," "," "," "," "],
   [" "," "," "," "," "," "," ","#","#"," "," "," "," "," "," "," "," ","#"," "," ","#"," "," ","#"," "],
   [" "," "," "," "," ","#","#"," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," ","#"," "," "],
   [" "," "," "," ","#","#"," "," "," "," "," "," "," "," ","#"," "," "," "," "," "," ","#"," "," "," "],
   [" "," "," ","X"," "," "," "," "," "," "," "," "," "," "," ","#"," "," ","#"," ","#"," ","#"," "," "],
   ["#","#","#"," ","#"," ","#"," "," "," "," "," "," "," "," "," "," "," ","#","#"," "," "," ","#"," "],
   ["#"," "," "," "," "," "," "," ","#"," "," "," ","#"," ","#"," "," "," "," "," ","#"," ","#"," "," "],
   [" "," "," "," ","#"," ","#"," "," "," "," "," ","#"," "," "," "," "," ","#"," "," "," "," ","#"," "],
   [" "," ","#","#","#"," "," "," ","#"," "," "," "," "," "," "," "," ","#"," ","#"," ","#"," "," "," "],
   [" "," "," "," "," "," "," "," ","#","#"," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," "],
   [" "," "," ","#"," "," "," "," "," "," ","#"," ","#"," ","#"," "," "," "," "," ","#","#"," "," ","#"],
   [" "," "," "," "," ","#"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," "],
   [" "," ","#"," "," "," "," "," ","#","#","#"," ","#"," "," "," "," ","#"," "," "," "," "," "," ","#"],
   ["#"," "," "," ","#"," "," "," "," "," ","#","#"," "," "," "," "," ","#"," "," "," "," ","#"," "," "],
   [" "," "," "," "," "," ","#"," ","#"," ","#"," "," ","#"," "," "," "," "," "," "," "," "," "," "," "],
   [" "," ","#"," "," "," "," "," ","#"," "," "," "," "," ","#","#"," "," ","#"," ","#","#","#"," "," "],
   ["#"," "," ","#","#"," "," "," "," ","#"," "," "," ","#"," "," "," "," "," ","#","#","#"," "," "," "],
   [" "," "," "," "," "," "," "," "," "," ","#","#"," "," "," "," "," ","#"," "," "," "," "," "," "," "],
   ["#","#","#","#","#"," "," "," "," "," "," "," "," "," ","#","#","#"," ","#"," ","#"," ","#"," ","#"],
   [" ","#"," ","#"," ","#"," "," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," "," ","#"," "],
   ["#"," "," "," "," "," "," ","#"," "," ","#"," "," ","#","#","#"," "," "," "," "," ","#"," "," "," "],
   [" "," ","#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"," "," "," "," "],
   ["#"," "," "," "," ","#","#"," ","#"," "," "," "," "," "," "," "," ","#"," ","#","#"," ","#"," "," "]]



----------------------------------------

type Coord = (Int,Int)
type Path = String
type Sols = M.Map Coord (Maybe Path)

opts (x,y) = [ ('D', (x,     y + 1) )
             , ('R', (x + 1, y    ) ) 
             , ('U', (x    , y - 1) ) 
             , ('L', (x - 1, y    ) ) 
             ]

step lookup_fn (lim, pt@(x,y))
 | pt == target          = Just "X"
 | pt `elem` coords      = Nothing 
 | lim == 0              = Nothing
 | Prelude.null options  = Nothing
 | otherwise             = Just (shortest_first options)
   where options = [ step:path | (step,new_pt) <- opts pt
                               , Just path <- [ lookup_fn (lim - 1, new_pt) ] ] 

thing
 = table
   where table = M.fromList [ (lpt, step (table !?) lpt)
                            | x <- [0 .. fst target]
                            , y <- [0 .. snd target]
                            , let pt = (x,y)
                            -- , l <- [md pt target .. mc pt target]
                            -- , l <- [0 .. 4 * mc pt target]
                            , l <- [0 .. 4 * md pt target]
                            , let lpt = (l,pt)
                            ]

md (a,b) (x,y) = abs (a - x) + abs (b - y)
mc (a,b) (x,y) = abs (a - x) * abs (b - y) `div` 1  -- semi-conservative


t1 = thing !? (100, (0,0))
t2 = thing !? (1, target)
t3 = thing !? (10, (22,22))
td n = thing !? (n, (0,0))

pl :: Show a => [a] -> IO ()
pl = putStr . unlines . fmap show 


-- should be in lib?
m !? x = M.findWithDefault Nothing x m 

-- shortest_first = sortBy (\a b -> length a `compare` length b)
shortest_first = foldr1 shortest


-- stop when one list ends...
shortest xs ys = shortest_aux xs ys (xs, ys)

shortest_aux (x:xs) (y:ys) = shortest_aux xs ys 
shortest_aux []     _      = fst
shortest_aux _      []     = snd


